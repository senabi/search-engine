import type { NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import { useForm } from "react-hook-form";
import { SearchQueryType, searchQueryValidator } from "../shared/search-query";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState } from "react";

const Articles = ({ articles }: { articles: string[] }) => {
  return (
    <div>
      {articles?.map((article) => (
        <h1 id={article}>{article}</h1>
      ))}
    </div>
  );
};

const SearchBar = ({ setArticles }: { setArticles: any }) => {
  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
  } = useForm<SearchQueryType>({
    resolver: zodResolver(searchQueryValidator),
  });

  const mutationResponse = trpc.query.getArticles.useMutation({
    onSuccess: (data) => {
      setArticles(data.articles);
    },
  });
  const onSubmit = (data: SearchQueryType) => {
    console.log({ searchParameter: data });
    mutationResponse.mutate(data);
  };

  // useForm
  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className="flex h-full w-full items-center justify-center gap-4"
    >
      <input
        {...register("query")}
        className={`w-1/2 rounded-lg border bg-gray-700 p-2.5 text-sm text-white placeholder-gray-400 outline-none focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600`}
      />
      <button
        type="submit"
        className={`rounded-lg border border-gray-500 bg-gray-700 py-2 px-4 font-semibold hover:bg-gray-600`}
      >
        Search
      </button>
    </form>
  );
};

const Home: NextPage = () => {
  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });
  const [articles, setArticles] = useState<string[]>([]);

  return (
    <>
      <Head>
        <title>Giga Search</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center gap-4 p-4">
        <div className="flex items-center gap-4">
          <h1 className="text-7xl font-extrabold leading-normal">
            Giga Search
          </h1>
          <AuthShowcase />
        </div>
        <SearchBar setArticles={setArticles} />
        <Articles articles={articles}></Articles>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">
          Logged in as {sessionData?.user?.name}
        </p>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-500">{secretMessage}</p>
      )}
      <button
        className={`rounded-lg border border-gray-500 bg-gray-700 py-2 px-4 font-semibold hover:bg-gray-600`}
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
